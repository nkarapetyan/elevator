//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Elevator.h
//  @ Date : 6/3/2014
//  @ Author : 
//
//


#if !defined(_ELEVATOR_H)
#define _ELEVATOR_H

#include "Display.h"
#include "Door.h"
#include "Engine.h"
#include "Sensor.h"
#include "Button.h"
#include <vector>

class Elevator{
public:
    enum ElevatorStatus {
        IDLE,
        WAITING,
        INMOTION
    };

    enum Direction {
        UP,
        DOWN
    }; 

    void closeDoors();
    void openDoors();
    int getCurrentFloor() const;
    int getDestination() const;
    Direction getDirection() const;

    void stopCar();
    void moveCar();

    void setDisplay(int floorNumber);
    void setStatus(ElevatorStatus status);
    void setDestination(int dst);
    void setCurrentFloor(int floorNumber);
    void setDirection(Direction dir);

    Elevator(std::vector<Button*> elButtons, Sensor *sensor, Door* door, Engine* engine);
    ElevatorStatus getStatus() const;
    //void attachToSensor(ElevatorSystem* elSystem);
private:
    ElevatorStatus m_status;
    int m_currFloorNumber;
    int m_dstFloorNumber;
    Direction m_direction;

    Display* m_display;
    Door* m_elDoor;
    std::vector<Button*> m_buttons;
    Sensor* m_sensor;
    Engine* m_engine;

};

#endif  //_ELEVATOR_H
